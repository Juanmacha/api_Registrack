# 🚀 PROMPT PARA IMPLEMENTAR SERVICIOS Y PROCESOS COMPATIBLES CON FRONTEND

## 📋 **CONTEXTO Y OBJETIVO**

Necesito que implementes en tu backend una **compatibilidad completa** entre la API y el frontend para los módulos de **Servicios** y **Procesos/Solicitudes**. El frontend actual tiene una estructura específica que debe ser respetada y la API debe adaptarse a ella.

## 🎯 **OBJETIVOS ESPECÍFICOS**

1. **Servicios**: Migrar de endpoints públicos limitados a CRUD completo compatible con frontend
2. **Procesos/Solicitudes**: Adaptar la estructura de datos para que sea compatible con el frontend actual
3. **Compatibilidad**: Mantener la funcionalidad existente del frontend sin cambios

---

## 📊 **ANÁLISIS DEL FRONTEND ACTUAL**

### **🏗️ ESTRUCTURA DE SERVICIOS EN FRONTEND:**

```javascript
// Estructura esperada por el frontend
const SERVICIO_FRONTEND = {
  id: "1",
  nombre: "Búsqueda de Antecedentes",
  descripcion_corta: "Verificar disponibilidad de marca...",
  visible_en_landing: true,
  landing_data: {
    titulo: "Búsqueda de Antecedentes",
    resumen: "Verificamos la disponibilidad...",
    imagen: "data:image/png;base64,..."
  },
  info_page_data: {
    descripcion: "Descripción completa del servicio..."
  },
  route_path: "/pages/busqueda",
  process_states: [
    { id: "1", name: "Solicitud Recibida", order: 1, status_key: "recibida" },
    { id: "2", name: "Búsqueda en Proceso", order: 2, status_key: "en_proceso" },
    { id: "3", name: "Informe Generado", order: 3, status_key: "informe" }
  ]
};
```

### **🏗️ ESTRUCTURA DE PROCESOS/SOLICITUDES EN FRONTEND:**

```javascript
// Estructura esperada por el frontend
const PROCESO_FRONTEND = {
  id: "1",
  expediente: "EXP-123456789",
  titular: "Juan Pérez",
  marca: "TechNova",
  tipoSolicitud: "Certificación de Marca",
  encargado: "Sin asignar",
  estado: "En revisión",
  email: "juan@example.com",
  telefono: "3001234567",
  comentarios: [],
  fechaCreacion: "2024-01-15T10:30:00.000Z",
  fechaFin: null
};
```

---

## 🗄️ **CAMBIOS EN BASE DE DATOS**

### **1. TABLA `servicios` - ESTRUCTURA REQUERIDA:**

```sql
CREATE TABLE servicios (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(255) NOT NULL,
  descripcion_corta TEXT,
  visible_en_landing BOOLEAN DEFAULT true,
  landing_data JSON,
  info_page_data JSON,
  route_path VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

### **2. TABLA `process_states` - ESTRUCTURA REQUERIDA:**

```sql
CREATE TABLE process_states (
  id INT PRIMARY KEY AUTO_INCREMENT,
  servicio_id INT NOT NULL,
  name VARCHAR(255) NOT NULL,
  order_number INT NOT NULL,
  status_key VARCHAR(100) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (servicio_id) REFERENCES servicios(id) ON DELETE CASCADE
);
```

### **3. DATOS INICIALES PARA SERVICIOS:**

```sql
INSERT INTO servicios (id, nombre, descripcion_corta, visible_en_landing, landing_data, info_page_data, route_path) VALUES
(1, 'Búsqueda de Antecedentes', 'Verificar disponibilidad de marca comercial', true, 
 '{"titulo": "Búsqueda de Antecedentes", "resumen": "Verificamos la disponibilidad de tu marca comercial en la base de datos de la SIC", "imagen": ""}',
 '{"descripcion": "Este servicio permite verificar si una marca comercial ya está registrada o en proceso de registro."}',
 '/pages/busqueda'),

(2, 'Certificación de Marca', 'Certificar marca comercial ante la SIC', true,
 '{"titulo": "Certificación de Marca", "resumen": "Proceso completo de certificación de marca comercial", "imagen": ""}',
 '{"descripcion": "Servicio completo para certificar tu marca comercial ante la Superintendencia de Industria y Comercio."}',
 '/pages/certificacion'),

(3, 'Renovación de Marca', 'Renovar certificado de marca comercial', true,
 '{"titulo": "Renovación de Marca", "resumen": "Renueva tu certificado de marca comercial", "imagen": ""}',
 '{"descripcion": "Proceso de renovación de certificados de marca comercial existentes."}',
 '/pages/renovacion'),

(4, 'Presentación de Oposición', 'Oponerse a registro de marca', true,
 '{"titulo": "Presentación de Oposición", "resumen": "Oponte al registro de marcas que afecten tus derechos", "imagen": ""}',
 '{"descripcion": "Servicio para presentar oposiciones a registros de marca que puedan afectar tus derechos."}',
 '/pages/oposicion'),

(5, 'Cesión de Marca', 'Ceder derechos de marca comercial', true,
 '{"titulo": "Cesión de Marca", "resumen": "Cede los derechos de tu marca comercial", "imagen": ""}',
 '{"descripcion": "Proceso para ceder los derechos de una marca comercial registrada."}',
 '/pages/cesion'),

(6, 'Ampliación de Alcance', 'Ampliar cobertura de marca', true,
 '{"titulo": "Ampliación de Alcance", "resumen": "Amplía la cobertura de tu marca comercial", "imagen": ""}',
 '{"descripcion": "Servicio para ampliar la cobertura o clases de una marca comercial existente."}',
 '/pages/ampliacion');
```

### **4. DATOS INICIALES PARA PROCESS_STATES:**

```sql
-- Estados para Búsqueda de Antecedentes
INSERT INTO process_states (servicio_id, name, order_number, status_key) VALUES
(1, 'Solicitud Recibida', 1, 'recibida'),
(1, 'Búsqueda en Proceso', 2, 'en_proceso'),
(1, 'Informe Generado', 3, 'informe');

-- Estados para Certificación de Marca
INSERT INTO process_states (servicio_id, name, order_number, status_key) VALUES
(2, 'Solicitud Recibida', 1, 'recibida'),
(2, 'Revisión de Documentos', 2, 'revision'),
(2, 'Publicación', 3, 'publicacion'),
(2, 'Certificado Emitido', 4, 'certificado');

-- Estados para Renovación de Marca
INSERT INTO process_states (servicio_id, name, order_number, status_key) VALUES
(3, 'Solicitud Recibida', 1, 'recibida'),
(3, 'Verificación', 2, 'verificacion'),
(3, 'Renovación Aprobada', 3, 'renovacion');

-- Estados para Presentación de Oposición
INSERT INTO process_states (servicio_id, name, order_number, status_key) VALUES
(4, 'Oposición Presentada', 1, 'presentada'),
(4, 'En Revisión', 2, 'revision'),
(4, 'Resolución', 3, 'resolucion');

-- Estados para Cesión de Marca
INSERT INTO process_states (servicio_id, name, order_number, status_key) VALUES
(5, 'Solicitud Recibida', 1, 'recibida'),
(5, 'Verificación de Derechos', 2, 'verificacion'),
(5, 'Cesión Aprobada', 3, 'cesion');

-- Estados para Ampliación de Alcance
INSERT INTO process_states (servicio_id, name, order_number, status_key) VALUES
(6, 'Solicitud Recibida', 1, 'recibida'),
(6, 'Análisis de Viabilidad', 2, 'analisis'),
(6, 'Ampliación Aprobada', 3, 'ampliacion');
```

---

## 🔧 **CAMBIOS EN EL BACKEND**

### **1. MODELO `Servicio` - ACTUALIZAR:**

```javascript
// src/models/Servicio.js
const { DataTypes } = require('sequelize');
const sequelize = require('../config/db');

const Servicio = sequelize.define('Servicio', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  nombre: {
    type: DataTypes.STRING(255),
    allowNull: false
  },
  descripcion_corta: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  visible_en_landing: {
    type: DataTypes.BOOLEAN,
    defaultValue: true
  },
  landing_data: {
    type: DataTypes.JSON,
    allowNull: true
  },
  info_page_data: {
    type: DataTypes.JSON,
    allowNull: true
  },
  route_path: {
    type: DataTypes.STRING(255),
    allowNull: true
  }
}, {
  tableName: 'servicios',
  timestamps: true
});

module.exports = Servicio;
```

### **2. MODELO `ProcessState` - NUEVO:**

```javascript
// src/models/ProcessState.js
const { DataTypes } = require('sequelize');
const sequelize = require('../config/db');

const ProcessState = sequelize.define('ProcessState', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  servicio_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'servicios',
      key: 'id'
    }
  },
  name: {
    type: DataTypes.STRING(255),
    allowNull: false
  },
  order_number: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  status_key: {
    type: DataTypes.STRING(100),
    allowNull: false
  }
}, {
  tableName: 'process_states',
  timestamps: true
});

module.exports = ProcessState;
```

### **3. ASOCIACIONES - AGREGAR:**

```javascript
// En tu archivo de asociaciones o en los modelos
const Servicio = require('./models/Servicio');
const ProcessState = require('./models/ProcessState');

// Un servicio tiene muchos estados de proceso
Servicio.hasMany(ProcessState, {
  foreignKey: 'servicio_id',
  as: 'process_states'
});

// Un estado de proceso pertenece a un servicio
ProcessState.belongsTo(Servicio, {
  foreignKey: 'servicio_id',
  as: 'servicio'
});
```

### **4. CONTROLADOR DE SERVICIOS - ACTUALIZAR:**

```javascript
// src/controllers/servicio.controller.js
const Servicio = require('../models/Servicio');
const ProcessState = require('../models/ProcessState');

class ServicioController {
  // GET /api/servicios - Compatible con frontend
  async getAllServicios(req, res) {
    try {
      const servicios = await Servicio.findAll({
        include: [{
          model: ProcessState,
          as: 'process_states',
          order: [['order_number', 'ASC']]
        }]
      });

      // Transformar a formato frontend
      const serviciosFormateados = servicios.map(servicio => ({
        id: servicio.id.toString(),
        nombre: servicio.nombre,
        descripcion_corta: servicio.descripcion_corta,
        visible_en_landing: servicio.visible_en_landing,
        landing_data: servicio.landing_data || {},
        info_page_data: servicio.info_page_data || {},
        route_path: servicio.route_path,
        process_states: servicio.process_states.map(estado => ({
          id: estado.id.toString(),
          name: estado.name,
          order: estado.order_number,
          status_key: estado.status_key
        }))
      }));

      res.json(serviciosFormateados);
    } catch (error) {
      console.error('Error al obtener servicios:', error);
      res.status(500).json({ error: 'Error interno del servidor' });
    }
  }

  // GET /api/servicios/:id - Compatible con frontend
  async getServicioById(req, res) {
    try {
      const { id } = req.params;
      const servicio = await Servicio.findByPk(id, {
        include: [{
          model: ProcessState,
          as: 'process_states',
          order: [['order_number', 'ASC']]
        }]
      });

      if (!servicio) {
        return res.status(404).json({ error: 'Servicio no encontrado' });
      }

      // Transformar a formato frontend
      const servicioFormateado = {
        id: servicio.id.toString(),
        nombre: servicio.nombre,
        descripcion_corta: servicio.descripcion_corta,
        visible_en_landing: servicio.visible_en_landing,
        landing_data: servicio.landing_data || {},
        info_page_data: servicio.info_page_data || {},
        route_path: servicio.route_path,
        process_states: servicio.process_states.map(estado => ({
          id: estado.id.toString(),
          name: estado.name,
          order: estado.order_number,
          status_key: estado.status_key
        }))
      };

      res.json(servicioFormateado);
    } catch (error) {
      console.error('Error al obtener servicio:', error);
      res.status(500).json({ error: 'Error interno del servidor' });
    }
  }

  // PUT /api/servicios/:id - Actualizar servicio (compatible con frontend)
  async updateServicio(req, res) {
    try {
      const { id } = req.params;
      const { landing_data, info_page_data, process_states, visible_en_landing } = req.body;

      const servicio = await Servicio.findByPk(id);
      if (!servicio) {
        return res.status(404).json({ error: 'Servicio no encontrado' });
      }

      // Actualizar servicio
      await servicio.update({
        landing_data: landing_data || servicio.landing_data,
        info_page_data: info_page_data || servicio.info_page_data,
        visible_en_landing: visible_en_landing !== undefined ? visible_en_landing : servicio.visible_en_landing
      });

      // Actualizar process_states si se proporcionan
      if (process_states && Array.isArray(process_states)) {
        // Eliminar estados existentes
        await ProcessState.destroy({ where: { servicio_id: id } });
        
        // Crear nuevos estados
        const nuevosEstados = process_states.map(estado => ({
          servicio_id: id,
          name: estado.name,
          order_number: estado.order,
          status_key: estado.status_key
        }));
        
        await ProcessState.bulkCreate(nuevosEstados);
      }

      // Obtener servicio actualizado con relaciones
      const servicioActualizado = await Servicio.findByPk(id, {
        include: [{
          model: ProcessState,
          as: 'process_states',
          order: [['order_number', 'ASC']]
        }]
      });

      // Transformar a formato frontend
      const servicioFormateado = {
        id: servicioActualizado.id.toString(),
        nombre: servicioActualizado.nombre,
        descripcion_corta: servicioActualizado.descripcion_corta,
        visible_en_landing: servicioActualizado.visible_en_landing,
        landing_data: servicioActualizado.landing_data || {},
        info_page_data: servicioActualizado.info_page_data || {},
        route_path: servicioActualizado.route_path,
        process_states: servicioActualizado.process_states.map(estado => ({
          id: estado.id.toString(),
          name: estado.name,
          order: estado.order_number,
          status_key: estado.status_key
        }))
      };

      res.json({
        success: true,
        message: 'Servicio actualizado exitosamente',
        data: servicioFormateado
      });
    } catch (error) {
      console.error('Error al actualizar servicio:', error);
      res.status(500).json({ error: 'Error interno del servidor' });
    }
  }
}

module.exports = new ServicioController();
```

### **5. RUTAS DE SERVICIOS - ACTUALIZAR:**

```javascript
// src/routes/servicio.routes.js
const express = require('express');
const router = express.Router();
const servicioController = require('../controllers/servicio.controller');
const authMiddleware = require('../middlewares/auth.middleware');
const roleMiddleware = require('../middlewares/role.middleware');

// Rutas públicas
router.get('/', servicioController.getAllServicios);
router.get('/:id', servicioController.getServicioById);
router.get('/:id/procesos', servicioController.getServicioById); // Alias para compatibilidad

// Rutas protegidas (admin/empleado)
router.put('/:id', 
  authMiddleware.authenticate, 
  roleMiddleware.requireRole(['administrador', 'empleado']),
  servicioController.updateServicio
);

module.exports = router;
```

---

## 🔄 **ADAPTACIÓN DE SOLICITUDES/PROCESOS**

### **6. CONTROLADOR DE SOLICITUDES - ADAPTAR:**

```javascript
// src/controllers/solicitudes.controller.js
// Agregar función para transformar solicitudes a formato frontend

// Función para transformar solicitud a formato frontend
transformarSolicitudAFrontend(ordenServicio) {
  return {
    id: ordenServicio.id_orden_servicio?.toString() || ordenServicio.id?.toString(),
    expediente: ordenServicio.numero_orden || `EXP-${ordenServicio.id_orden_servicio || ordenServicio.id}`,
    titular: ordenServicio.cliente?.usuario ? 
      `${ordenServicio.cliente.usuario.nombre} ${ordenServicio.cliente.usuario.apellido}` : 
      ordenServicio.cliente?.marca || 'Sin titular',
    marca: ordenServicio.cliente?.marca || 'Sin marca',
    tipoSolicitud: ordenServicio.servicio?.nombre || 'Sin servicio',
    encargado: ordenServicio.empleado_asignado?.usuario ? 
      `${ordenServicio.empleado_asignado.usuario.nombre} ${ordenServicio.empleado_asignado.usuario.apellido}` : 
      'Sin asignar',
    estado: ordenServicio.estado || 'Pendiente',
    email: ordenServicio.cliente?.usuario?.correo || '',
    telefono: ordenServicio.cliente?.usuario?.telefono || '',
    comentarios: ordenServicio.comentarios || [],
    fechaCreacion: ordenServicio.fecha_solicitud || ordenServicio.created_at,
    fechaFin: ordenServicio.fecha_fin || null
  };
}

// GET /api/gestion-solicitudes - Adaptar respuesta
async getAllSolicitudes(req, res) {
  try {
    const solicitudes = await this.solicitudService.getAllSolicitudes();
    
    // Transformar a formato frontend
    const solicitudesFormateadas = solicitudes.map(solicitud => 
      this.transformarSolicitudAFrontend(solicitud)
    );

    res.json(solicitudesFormateadas);
  } catch (error) {
    console.error('Error al obtener solicitudes:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
}

// GET /api/gestion-solicitudes/mias - Adaptar para cliente
async getMisSolicitudes(req, res) {
  try {
    const { id_usuario } = req.user;
    const solicitudes = await this.solicitudService.getSolicitudesByUser(id_usuario);
    
    // Transformar a formato frontend
    const solicitudesFormateadas = solicitudes.map(solicitud => 
      this.transformarSolicitudAFrontend(solicitud)
    );

    res.json(solicitudesFormateadas);
  } catch (error) {
    console.error('Error al obtener mis solicitudes:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
}
```

---

## 📋 **ENDPOINTS FINALES COMPATIBLES**

### **SERVICIOS:**
```http
GET /api/servicios                    # Lista servicios en formato frontend
GET /api/servicios/:id               # Servicio específico en formato frontend
GET /api/servicios/:id/procesos      # Alias para compatibilidad
PUT /api/servicios/:id               # Actualizar servicio (admin/empleado)
```

### **SOLICITUDES/PROCESOS:**
```http
POST /api/gestion-solicitudes/crear/:servicio    # Crear solicitud
GET /api/gestion-solicitudes/mias               # Mis solicitudes (cliente)
GET /api/gestion-solicitudes                    # Todas (admin/empleado)
GET /api/gestion-solicitudes/:id               # Solicitud específica
PUT /api/gestion-solicitudes/editar/:id         # Editar solicitud
PUT /api/gestion-solicitudes/anular/:id         # Anular solicitud
```

---

## 🧪 **DATOS DE PRUEBA**

### **Script de migración completo:**

```sql
-- 1. Crear tablas
CREATE TABLE IF NOT EXISTS servicios (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(255) NOT NULL,
  descripcion_corta TEXT,
  visible_en_landing BOOLEAN DEFAULT true,
  landing_data JSON,
  info_page_data JSON,
  route_path VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS process_states (
  id INT PRIMARY KEY AUTO_INCREMENT,
  servicio_id INT NOT NULL,
  name VARCHAR(255) NOT NULL,
  order_number INT NOT NULL,
  status_key VARCHAR(100) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (servicio_id) REFERENCES servicios(id) ON DELETE CASCADE
);

-- 2. Insertar servicios
INSERT INTO servicios (id, nombre, descripcion_corta, visible_en_landing, landing_data, info_page_data, route_path) VALUES
(1, 'Búsqueda de Antecedentes', 'Verificar disponibilidad de marca comercial', true, 
 '{"titulo": "Búsqueda de Antecedentes", "resumen": "Verificamos la disponibilidad de tu marca comercial en la base de datos de la SIC", "imagen": ""}',
 '{"descripcion": "Este servicio permite verificar si una marca comercial ya está registrada o en proceso de registro."}',
 '/pages/busqueda'),

(2, 'Certificación de Marca', 'Certificar marca comercial ante la SIC', true,
 '{"titulo": "Certificación de Marca", "resumen": "Proceso completo de certificación de marca comercial", "imagen": ""}',
 '{"descripcion": "Servicio completo para certificar tu marca comercial ante la Superintendencia de Industria y Comercio."}',
 '/pages/certificacion'),

(3, 'Renovación de Marca', 'Renovar certificado de marca comercial', true,
 '{"titulo": "Renovación de Marca", "resumen": "Renueva tu certificado de marca comercial", "imagen": ""}',
 '{"descripcion": "Proceso de renovación de certificados de marca comercial existentes."}',
 '/pages/renovacion'),

(4, 'Presentación de Oposición', 'Oponerse a registro de marca', true,
 '{"titulo": "Presentación de Oposición", "resumen": "Oponte al registro de marcas que afecten tus derechos", "imagen": ""}',
 '{"descripcion": "Servicio para presentar oposiciones a registros de marca que puedan afectar tus derechos."}',
 '/pages/oposicion'),

(5, 'Cesión de Marca', 'Ceder derechos de marca comercial', true,
 '{"titulo": "Cesión de Marca", "resumen": "Cede los derechos de tu marca comercial", "imagen": ""}',
 '{"descripcion": "Proceso para ceder los derechos de una marca comercial registrada."}',
 '/pages/cesion'),

(6, 'Ampliación de Alcance', 'Ampliar cobertura de marca', true,
 '{"titulo": "Ampliación de Alcance", "resumen": "Amplía la cobertura de tu marca comercial", "imagen": ""}',
 '{"descripcion": "Servicio para ampliar la cobertura o clases de una marca comercial existente."}',
 '/pages/ampliacion');

-- 3. Insertar estados de proceso
INSERT INTO process_states (servicio_id, name, order_number, status_key) VALUES
-- Búsqueda de Antecedentes
(1, 'Solicitud Recibida', 1, 'recibida'),
(1, 'Búsqueda en Proceso', 2, 'en_proceso'),
(1, 'Informe Generado', 3, 'informe'),

-- Certificación de Marca
(2, 'Solicitud Recibida', 1, 'recibida'),
(2, 'Revisión de Documentos', 2, 'revision'),
(2, 'Publicación', 3, 'publicacion'),
(2, 'Certificado Emitido', 4, 'certificado'),

-- Renovación de Marca
(3, 'Solicitud Recibida', 1, 'recibida'),
(3, 'Verificación', 2, 'verificacion'),
(3, 'Renovación Aprobada', 3, 'renovacion'),

-- Presentación de Oposición
(4, 'Oposición Presentada', 1, 'presentada'),
(4, 'En Revisión', 2, 'revision'),
(4, 'Resolución', 3, 'resolucion'),

-- Cesión de Marca
(5, 'Solicitud Recibida', 1, 'recibida'),
(5, 'Verificación de Derechos', 2, 'verificacion'),
(5, 'Cesión Aprobada', 3, 'cesion'),

-- Ampliación de Alcance
(6, 'Solicitud Recibida', 1, 'recibida'),
(6, 'Análisis de Viabilidad', 2, 'analisis'),
(6, 'Ampliación Aprobada', 3, 'ampliacion');
```

---

## ✅ **RESULTADO ESPERADO**

Después de implementar estos cambios:

1. **Servicios**: La API devolverá servicios en formato compatible con el frontend
2. **Procesos**: Las solicitudes se transformarán al formato esperado por el frontend
3. **Compatibilidad**: El frontend funcionará sin cambios
4. **Funcionalidad**: Se mantendrá toda la funcionalidad existente
5. **Datos persistentes**: Los servicios estarán en la base de datos

## 🎯 **PASOS DE IMPLEMENTACIÓN**

1. **Ejecutar scripts SQL** para crear tablas y datos
2. **Crear/actualizar modelos** de Sequelize
3. **Implementar controladores** con transformaciones
4. **Actualizar rutas** para compatibilidad
5. **Probar endpoints** con Postman
6. **Verificar compatibilidad** con frontend

---

**¿Estás listo para implementar estos cambios? Una vez que los tengas listos, podremos proceder con la conexión del frontend a la API.**
